{
  "README.html": {
    "href": "README.html",
    "title": "Rise - TIAO1 | rise.buut",
    "keywords": "Rise - TIAO1 Team Members Glen Heyvaert - glen.heyvaert@student.hogent.be - glenHeyvaert Andreeas Firoiu - andreeas.firoiu@student.hogent.be - AFIRO Lorenz De Bie - lorenz.debie@student.hogent.be - Lorenzdebie Fedor Danilov - fedor.danilov@student.hogent.be - FedDanPav Keoma Plovie - keoma.plovie@student.hogent.be - kpHoGent Robin Benoot - robin.benoot@student.hogent.be - BenootRobin Technologies & Packages Used Blazor - Frontend ASP.NET 8 - Backend Entity Framework 8 - Database Access EntityFrameworkCore Triggered - Database Triggers User Secrets - Securely store secrets in DEV. GuardClauses - Validation Helper bUnit - Blazor Component Testing xUnit - (Unit) Testing nSubstitute - Mocking for testing Shouldly - Helper for testing Installation Instructions Clone the repository Open the Rise.sln file in Visual Studio or Visual Studio Code Run the project using the Rise.Server project as the startup project The project should open in your default browser on port 5001. Initially the database will not exist, so you will need to run the migrations to create the database. Creation of the database To create the database, run the following command in the main folder Rise dotnet ef database update --startup-project Rise.Server --project Rise.Persistence Make sure your connection string is correct in the Rise/Server/appsettings.json file. Migrations Adapting the database schema can be done using migrations. To create a new migration, run the following command: dotnet ef migrations add [MIGRATION_NAME] --startup-project Rise.Server --project Rise.Persistence And then update the database using the following command: dotnet ef database update --startup-project Rise.Server --project Rise.Persistence"
  },
  "Rise.Client/wwwroot/css/open-iconic/README.html": {
    "href": "Rise.Client/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | rise.buut",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic. It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide. Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License. Fonts All fonts are under the SIL Licensed."
  },
  "api/Rise.Client.App.html": {
    "href": "api/Rise.Client.App.html",
    "title": "Class App | rise.buut",
    "keywords": "Class App Namespace Rise.Client Assembly Rise.Client.dll public class App : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase App Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Rise.Client.Layout.MainLayout.html": {
    "href": "api/Rise.Client.Layout.MainLayout.html",
    "title": "Class MainLayout | rise.buut",
    "keywords": "Class MainLayout Namespace Rise.Client.Layout Assembly Rise.Client.dll public class MainLayout : LayoutComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase LayoutComponentBase MainLayout Implements IComponent IHandleEvent IHandleAfterRender Inherited Members LayoutComponentBase.SetParametersAsync(ParameterView) LayoutComponentBase.Body ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Rise.Client.Layout.NavMenu.html": {
    "href": "api/Rise.Client.Layout.NavMenu.html",
    "title": "Class NavMenu | rise.buut",
    "keywords": "Class NavMenu Namespace Rise.Client.Layout Assembly Rise.Client.dll public class NavMenu : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase NavMenu Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Rise.Client.Layout.html": {
    "href": "api/Rise.Client.Layout.html",
    "title": "Namespace Rise.Client.Layout | rise.buut",
    "keywords": "Namespace Rise.Client.Layout Classes MainLayout NavMenu"
  },
  "api/Rise.Client.Pages.Counter.html": {
    "href": "api/Rise.Client.Pages.Counter.html",
    "title": "Class Counter | rise.buut",
    "keywords": "Class Counter Namespace Rise.Client.Pages Assembly Rise.Client.dll [Route(\"/counter\")] public class Counter : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase Counter Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Rise.Client.Pages.CounterShould.html": {
    "href": "api/Rise.Client.Pages.CounterShould.html",
    "title": "Class CounterShould | rise.buut",
    "keywords": "Class CounterShould Namespace Rise.Client.Pages Assembly Rise.Client.Tests.dll These tests are written entirely in C#. Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-cs-files public class CounterShould : TestContext, IDisposable Inheritance object TestContextBase TestContext CounterShould Implements IDisposable Inherited Members TestContext.RenderComponent<TComponent>(params ComponentParameter[]) TestContext.RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) TestContext.Render<TComponent>(RenderFragment) TestContext.Render(RenderFragment) TestContext.BuildRenderTree(RenderTreeBuilder) TestContext.CreateTestRenderer() TestContext.JSInterop TestContextBase.Dispose() TestContextBase.Dispose(bool) TestContextBase.DisposeComponents() TestContextBase.DefaultWaitTimeout TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.ComponentFactories object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CounterShould(ITestOutputHelper) public CounterShould(ITestOutputHelper outputHelper) Parameters outputHelper ITestOutputHelper Methods ClickingButtonIncrementsCounter() [Fact] public void ClickingButtonIncrementsCounter() CounterStartsAtZero() [Fact] public void CounterStartsAtZero()"
  },
  "api/Rise.Client.Pages.Index.html": {
    "href": "api/Rise.Client.Pages.Index.html",
    "title": "Class Index | rise.buut",
    "keywords": "Class Index Namespace Rise.Client.Pages Assembly Rise.Client.dll [Route(\"/\")] public class Index : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase Index Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Rise.Client.Pages.IndexShould.html": {
    "href": "api/Rise.Client.Pages.IndexShould.html",
    "title": "Class IndexShould | rise.buut",
    "keywords": "Class IndexShould Namespace Rise.Client.Pages Assembly Rise.Client.Tests.dll These tests are written entirely in C#. Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-cs-files public class IndexShould : TestContext, IDisposable Inheritance object TestContextBase TestContext IndexShould Implements IDisposable Inherited Members TestContext.RenderComponent<TComponent>(params ComponentParameter[]) TestContext.RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) TestContext.Render<TComponent>(RenderFragment) TestContext.Render(RenderFragment) TestContext.BuildRenderTree(RenderTreeBuilder) TestContext.CreateTestRenderer() TestContext.JSInterop TestContextBase.Dispose() TestContextBase.Dispose(bool) TestContextBase.DisposeComponents() TestContextBase.DefaultWaitTimeout TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.ComponentFactories object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IndexShould(ITestOutputHelper) public IndexShould(ITestOutputHelper outputHelper) Parameters outputHelper ITestOutputHelper Methods ShowHelloWorld() [Fact] public void ShowHelloWorld()"
  },
  "api/Rise.Client.Pages.Login.html": {
    "href": "api/Rise.Client.Pages.Login.html",
    "title": "Class Login | rise.buut",
    "keywords": "Class Login Namespace Rise.Client.Pages Assembly Rise.Client.dll [Route(\"/login\")] public class Login : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase Login Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Rise.Client.Pages.html": {
    "href": "api/Rise.Client.Pages.html",
    "title": "Namespace Rise.Client.Pages | rise.buut",
    "keywords": "Namespace Rise.Client.Pages Classes Counter CounterShould These tests are written entirely in C#. Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-cs-files Index IndexShould These tests are written entirely in C#. Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-cs-files Login"
  },
  "api/Rise.Client.Products.FakeProductService.html": {
    "href": "api/Rise.Client.Products.FakeProductService.html",
    "title": "Class FakeProductService | rise.buut",
    "keywords": "Class FakeProductService Namespace Rise.Client.Products Assembly Rise.Client.Tests.dll public class FakeProductService : IProductService Inheritance object FakeProductService Implements IProductService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetProductsAsync() public Task<IEnumerable<ProductDto>> GetProductsAsync() Returns Task<IEnumerable<ProductDto>>"
  },
  "api/Rise.Client.Products.Index.html": {
    "href": "api/Rise.Client.Products.Index.html",
    "title": "Class Index | rise.buut",
    "keywords": "Class Index Namespace Rise.Client.Products Assembly Rise.Client.dll [Route(\"/products\")] public class Index : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase Index Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProductService [Inject] public required IProductService ProductService { get; set; } Property Value IProductService Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnInitializedAsync() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. Override this method if you will perform an asynchronous operation and want the component to refresh when that operation is completed. protected override Task OnInitializedAsync() Returns Task A Task representing any asynchronous operation."
  },
  "api/Rise.Client.Products.IndexShould.html": {
    "href": "api/Rise.Client.Products.IndexShould.html",
    "title": "Class IndexShould | rise.buut",
    "keywords": "Class IndexShould Namespace Rise.Client.Products Assembly Rise.Client.Tests.dll These tests are written entirely in C#. Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-cs-files public class IndexShould : TestContext, IDisposable Inheritance object TestContextBase TestContext IndexShould Implements IDisposable Inherited Members TestContext.RenderComponent<TComponent>(params ComponentParameter[]) TestContext.RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) TestContext.Render<TComponent>(RenderFragment) TestContext.Render(RenderFragment) TestContext.BuildRenderTree(RenderTreeBuilder) TestContext.CreateTestRenderer() TestContext.JSInterop TestContextBase.Dispose() TestContextBase.Dispose(bool) TestContextBase.DisposeComponents() TestContextBase.DefaultWaitTimeout TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.ComponentFactories object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IndexShould(ITestOutputHelper) public IndexShould(ITestOutputHelper outputHelper) Parameters outputHelper ITestOutputHelper Methods ShowsProducts() [Fact] public void ShowsProducts()"
  },
  "api/Rise.Client.Products.IndexWithMockExampleShould.html": {
    "href": "api/Rise.Client.Products.IndexWithMockExampleShould.html",
    "title": "Class IndexWithMockExampleShould | rise.buut",
    "keywords": "Class IndexWithMockExampleShould Namespace Rise.Client.Products Assembly Rise.Client.Tests.dll Same as IndexShould using mocking instead of faking. https://nsubstitute.github.io public class IndexWithMockExampleShould : TestContext, IDisposable Inheritance object TestContextBase TestContext IndexWithMockExampleShould Implements IDisposable Inherited Members TestContext.RenderComponent<TComponent>(params ComponentParameter[]) TestContext.RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) TestContext.Render<TComponent>(RenderFragment) TestContext.Render(RenderFragment) TestContext.BuildRenderTree(RenderTreeBuilder) TestContext.CreateTestRenderer() TestContext.JSInterop TestContextBase.Dispose() TestContextBase.Dispose(bool) TestContextBase.DisposeComponents() TestContextBase.DefaultWaitTimeout TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.ComponentFactories object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IndexWithMockExampleShould(ITestOutputHelper) public IndexWithMockExampleShould(ITestOutputHelper outputHelper) Parameters outputHelper ITestOutputHelper Methods ShowsProducts() [Fact] public void ShowsProducts()"
  },
  "api/Rise.Client.Products.ProductService.html": {
    "href": "api/Rise.Client.Products.ProductService.html",
    "title": "Class ProductService | rise.buut",
    "keywords": "Class ProductService Namespace Rise.Client.Products Assembly Rise.Client.dll public class ProductService : IProductService Inheritance object ProductService Implements IProductService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductService(HttpClient) public ProductService(HttpClient httpClient) Parameters httpClient HttpClient Methods GetProductsAsync() public Task<IEnumerable<ProductDto>> GetProductsAsync() Returns Task<IEnumerable<ProductDto>>"
  },
  "api/Rise.Client.Products.html": {
    "href": "api/Rise.Client.Products.html",
    "title": "Namespace Rise.Client.Products | rise.buut",
    "keywords": "Namespace Rise.Client.Products Classes FakeProductService Index IndexShould These tests are written entirely in C#. Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-cs-files IndexWithMockExampleShould Same as IndexShould using mocking instead of faking. https://nsubstitute.github.io ProductService"
  },
  "api/Rise.Client._Imports.html": {
    "href": "api/Rise.Client._Imports.html",
    "title": "Class _Imports | rise.buut",
    "keywords": "Class _Imports Namespace Rise.Client Assembly Rise.Client.dll public class _Imports : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Inheritance object ComponentBase _Imports Implements IComponent IHandleEvent IHandleAfterRender Inherited Members ComponentBase.OnInitialized() ComponentBase.OnInitializedAsync() ComponentBase.OnParametersSet() ComponentBase.OnParametersSetAsync() ComponentBase.StateHasChanged() ComponentBase.ShouldRender() ComponentBase.OnAfterRender(bool) ComponentBase.OnAfterRenderAsync(bool) ComponentBase.InvokeAsync(Action) ComponentBase.InvokeAsync(Func<Task>) ComponentBase.DispatchExceptionAsync(Exception) ComponentBase.SetParametersAsync(ParameterView) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Rise.Client.html": {
    "href": "api/Rise.Client.html",
    "title": "Namespace Rise.Client | rise.buut",
    "keywords": "Namespace Rise.Client Classes App _Imports"
  },
  "api/Rise.Domain.Common.Entity.html": {
    "href": "api/Rise.Domain.Common.Entity.html",
    "title": "Class Entity | rise.buut",
    "keywords": "Class Entity Namespace Rise.Domain.Common Assembly Rise.Domain.dll Entity Base Class public abstract class Entity Inheritance object Entity Derived Product Address Role User Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Entity() protected Entity() Entity(int) protected Entity(int id) Parameters id int Properties CreatedAt Date of the initial creation. public DateTime CreatedAt { get; set; } Property Value DateTime Id Primary Key of the Entity public int Id { get; protected set; } Property Value int IsDeleted Soft Delete indicator, instead of deleting rows, we flag them as deleted. public bool IsDeleted { get; set; } Property Value bool UpdatedAt Date of the last update. public DateTime UpdatedAt { get; set; } Property Value DateTime Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(Entity, Entity) public static bool operator ==(Entity a, Entity b) Parameters a Entity b Entity Returns bool operator !=(Entity, Entity) public static bool operator !=(Entity a, Entity b) Parameters a Entity b Entity Returns bool"
  },
  "api/Rise.Domain.Common.RolesEnum.html": {
    "href": "api/Rise.Domain.Common.RolesEnum.html",
    "title": "Enum RolesEnum | rise.buut",
    "keywords": "Enum RolesEnum Namespace Rise.Domain.Common Assembly Rise.Domain.dll public enum RolesEnum Fields Admin = 0 Godparent = 2 User = 1"
  },
  "api/Rise.Domain.Common.StreetEnum.html": {
    "href": "api/Rise.Domain.Common.StreetEnum.html",
    "title": "Enum StreetEnum | rise.buut",
    "keywords": "Enum StreetEnum Namespace Rise.Domain.Common Assembly Rise.Domain.dll public enum StreetEnum Extension Methods StreetEnumExtensions.GetStreetName(StreetEnum) Fields AFRIKALAAN = 1 BATAVIABRUG = 2 DECKERSTRAAT = 3 DOKNOORD = 4 DOORNZELESTRAAT = 5 FINLANDSTRAAT = 6 GASMETERLAAN = 7 GOUDBLOEMSTRAAT = 8 GROENDREEF = 9 GROTEMUIDE = 10 HALVEMAANSTRAAT = 11 HAM = 12 HAMERSTRAAT = 13 INDUSTRIEWEG = 14 KARELANTHEUNISSTRAAT = 15 KIEKENBOSSTRAAT = 16 KOOPVAARDIJLAAN = 17 LANGERBRUGGEKAAI = 18 MEULESTEDEBRUG = 19 MEULESTEDEDIJK = 20 MEULESTEDEHOF = 21 MEULESTEDEKAAI = 22 MEULESTEEDSESTEENWEG = 23 MUIDEHOFSTRAAT = 24 MUIDEKAAI = 25 MUIDELAAN = 26 MUIDEPOORT = 27 NEERMEERSKAAI = 28 NIEUWEVAART = 29 NULL = 0 OKTROOIPLEIN = 30 SCHELDEKAAI = 31 SCHOONSCHIPSTRAAT = 32 SPANJAARDSTRAAT = 33 STAPELPLEIN = 34 VOORHAVENKAAI = 35 ZEESCHIPSTRAAT = 36 ZEESCHIPSTRAATJE = 37 ZONGELAAN = 38"
  },
  "api/Rise.Domain.Common.StreetEnumExtensions.html": {
    "href": "api/Rise.Domain.Common.StreetEnumExtensions.html",
    "title": "Class StreetEnumExtensions | rise.buut",
    "keywords": "Class StreetEnumExtensions Namespace Rise.Domain.Common Assembly Rise.Domain.dll public static class StreetEnumExtensions Inheritance object StreetEnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetStreetEnum(string) public static StreetEnum GetStreetEnum(this string streetName) Parameters streetName string Returns StreetEnum GetStreetName(StreetEnum) public static string GetStreetName(this StreetEnum streetType) Parameters streetType StreetEnum Returns string"
  },
  "api/Rise.Domain.Common.html": {
    "href": "api/Rise.Domain.Common.html",
    "title": "Namespace Rise.Domain.Common | rise.buut",
    "keywords": "Namespace Rise.Domain.Common Classes Entity Entity Base Class StreetEnumExtensions Enums RolesEnum StreetEnum"
  },
  "api/Rise.Domain.Products.Product.html": {
    "href": "api/Rise.Domain.Products.Product.html",
    "title": "Class Product | rise.buut",
    "keywords": "Class Product Namespace Rise.Domain.Products Assembly Rise.Domain.dll public class Product : Entity Inheritance object Entity Product Inherited Members Entity.Id Entity.CreatedAt Entity.UpdatedAt Entity.IsDeleted Entity.Equals(object) Entity.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name public required string Name { get; set; } Property Value string"
  },
  "api/Rise.Domain.Products.html": {
    "href": "api/Rise.Domain.Products.html",
    "title": "Namespace Rise.Domain.Products | rise.buut",
    "keywords": "Namespace Rise.Domain.Products Classes Product"
  },
  "api/Rise.Domain.Tests.Products.ProductShould.html": {
    "href": "api/Rise.Domain.Tests.Products.ProductShould.html",
    "title": "Class ProductShould | rise.buut",
    "keywords": "Class ProductShould Namespace Rise.Domain.Tests.Products Assembly Rise.Domain.Tests.dll Example Domain Tests using xUnit and Shouldly https://xunit.net https://docs.shouldly.org public class ProductShould Inheritance object ProductShould Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BeCreated() [Fact] public void BeCreated() NotBeChangedToHaveAnInvalidName(string?) [Theory] [InlineData(null)] [InlineData(new object[] { \" \" })] [InlineData(new object[] { \"\" })] public void NotBeChangedToHaveAnInvalidName(string? name) Parameters name string NotBeCreatedWithAnInvalidName(string?) [Theory] [InlineData(null)] [InlineData(new object[] { \" \" })] [InlineData(new object[] { \"\" })] public void NotBeCreatedWithAnInvalidName(string? name) Parameters name string"
  },
  "api/Rise.Domain.Tests.Products.html": {
    "href": "api/Rise.Domain.Tests.Products.html",
    "title": "Namespace Rise.Domain.Tests.Products | rise.buut",
    "keywords": "Namespace Rise.Domain.Tests.Products Classes ProductShould Example Domain Tests using xUnit and Shouldly https://xunit.net https://docs.shouldly.org"
  },
  "api/Rise.Domain.Tests.Users.AddressShould.html": {
    "href": "api/Rise.Domain.Tests.Users.AddressShould.html",
    "title": "Class AddressShould | rise.buut",
    "keywords": "Class AddressShould Namespace Rise.Domain.Tests.Users Assembly Rise.Domain.Tests.dll public class AddressShould Inheritance object AddressShould Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ShouldAssignCorrectHouseNumber() [Fact] public void ShouldAssignCorrectHouseNumber() ShouldAssignCorrectStreet() [Fact] public void ShouldAssignCorrectStreet() ShouldThrowIncorrectHouseNumber(int) [Theory] [InlineData(new object[] { 0 })] [InlineData(new object[] { -1 })] public void ShouldThrowIncorrectHouseNumber(int houseNumber) Parameters houseNumber int ShouldThrowIncorrectStreet() [Fact] public void ShouldThrowIncorrectStreet()"
  },
  "api/Rise.Domain.Tests.Users.RoleShould.html": {
    "href": "api/Rise.Domain.Tests.Users.RoleShould.html",
    "title": "Class RoleShould | rise.buut",
    "keywords": "Class RoleShould Namespace Rise.Domain.Tests.Users Assembly Rise.Domain.Tests.dll public class RoleShould Inheritance object RoleShould Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ShouldAssignCorrectRole() [Fact] public void ShouldAssignCorrectRole()"
  },
  "api/Rise.Domain.Tests.Users.UserShould.html": {
    "href": "api/Rise.Domain.Tests.Users.UserShould.html",
    "title": "Class UserShould | rise.buut",
    "keywords": "Class UserShould Namespace Rise.Domain.Tests.Users Assembly Rise.Domain.Tests.dll public class UserShould Inheritance object UserShould Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ShouldAssignCorrectAddressToUser() [Fact] public void ShouldAssignCorrectAddressToUser() ShouldAssignCorrectRoleToUser() [Fact] public void ShouldAssignCorrectRoleToUser() ShouldCreateCorrectUser() [Fact] public void ShouldCreateCorrectUser() ShouldThrowIncorrectEmail(string?) [Theory] [InlineData(null)] [InlineData(new object[] { \" \" })] [InlineData(new object[] { \"\" })] public void ShouldThrowIncorrectEmail(string? email) Parameters email string ShouldThrowIncorrectFirstname(string?) [Theory] [InlineData(null)] [InlineData(new object[] { \" \" })] [InlineData(new object[] { \"\" })] public void ShouldThrowIncorrectFirstname(string? firstname) Parameters firstname string ShouldThrowIncorrectLastname(string?) [Theory] [InlineData(null)] [InlineData(new object[] { \" \" })] [InlineData(new object[] { \"\" })] public void ShouldThrowIncorrectLastname(string? lastname) Parameters lastname string ShouldThrowIncorrectPass(string?) [Theory] [InlineData(null)] [InlineData(new object[] { \" \" })] [InlineData(new object[] { \"\" })] public void ShouldThrowIncorrectPass(string? pass) Parameters pass string ShouldThrowIncorrectPhonenumber(string?) [Theory] [InlineData(null)] [InlineData(new object[] { \" \" })] [InlineData(new object[] { \"\" })] public void ShouldThrowIncorrectPhonenumber(string? phonenumber) Parameters phonenumber string"
  },
  "api/Rise.Domain.Tests.Users.html": {
    "href": "api/Rise.Domain.Tests.Users.html",
    "title": "Namespace Rise.Domain.Tests.Users | rise.buut",
    "keywords": "Namespace Rise.Domain.Tests.Users Classes AddressShould RoleShould UserShould"
  },
  "api/Rise.Domain.Users.Address.html": {
    "href": "api/Rise.Domain.Users.Address.html",
    "title": "Class Address | rise.buut",
    "keywords": "Class Address Namespace Rise.Domain.Users Assembly Rise.Domain.dll Represents a user's address in the system. public class Address : Entity Inheritance object Entity Address Inherited Members Entity.Id Entity.CreatedAt Entity.UpdatedAt Entity.IsDeleted Entity.Equals(object) Entity.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Address(string, int) Initializes a new instance of the Address class with the specified street and house number. public Address(string street, int houseNumber) Parameters street string The street of the address. houseNumber int The house number of the address. Address(string, int, string?) Initializes a new instance of the Address class with the specified street, house number, and optional bus number. public Address(string street, int houseNumber, string? bus = null) Parameters street string The street of the address. houseNumber int The house number of the address. bus string The optional bus number of the address. Properties Bus Gets or sets the optional bus number of the address. public string? Bus { get; set; } Property Value string HouseNumber Gets or sets the house number of the address. public int HouseNumber { get; set; } Property Value int Exceptions ArgumentOutOfRangeException Thrown when the house number is less than or equal to zero. Street Gets or sets the street name of the address. public string Street { get; set; } Property Value string Remarks The street name is derived from the StreetEnum enumeration. Exceptions ArgumentNullException Thrown when the street is null. User Gets or sets the user associated with this address. public User User { get; set; } Property Value User Exceptions ArgumentNullException Thrown when the user is null."
  },
  "api/Rise.Domain.Users.Role.html": {
    "href": "api/Rise.Domain.Users.Role.html",
    "title": "Class Role | rise.buut",
    "keywords": "Class Role Namespace Rise.Domain.Users Assembly Rise.Domain.dll Represents a role assigned to a user in the system. public class Role : Entity Inheritance object Entity Role Inherited Members Entity.Id Entity.CreatedAt Entity.UpdatedAt Entity.IsDeleted Entity.Equals(object) Entity.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Role(RolesEnum) Initializes a new instance of the Role class with a specified role name. public Role(RolesEnum name = RolesEnum.User) Parameters name RolesEnum The role name to assign. Defaults to User. Properties Name Gets or sets the name of the role. public RolesEnum Name { get; set; } Property Value RolesEnum Remarks The role name is based on the RolesEnum enumeration. Exceptions ArgumentOutOfRangeException Thrown when the assigned role name is not valid according to the RolesEnum."
  },
  "api/Rise.Domain.Users.User.html": {
    "href": "api/Rise.Domain.Users.User.html",
    "title": "Class User | rise.buut",
    "keywords": "Class User Namespace Rise.Domain.Users Assembly Rise.Domain.dll Represents a user entity in the system public class User : Entity Inheritance object Entity User Inherited Members Entity.Id Entity.CreatedAt Entity.UpdatedAt Entity.IsDeleted Entity.Equals(object) Entity.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors User(string, string, string, string, DateTime, Address, string) Initializes a new instance of the User class with the specified details. public User(string firstName, string lastName, string email, string password, DateTime birthDate, Address address, string phoneNumber) Parameters firstName string The first name of the user. lastName string The last name of the user. email string The email address of the user. password string The password of the user. birthDate DateTime The birth date of the user. address Address The address of the user. phoneNumber string The phone number of the user. Properties Address Gets or sets the address of the user. public Address Address { get; set; } Property Value Address BirthDate Gets or sets the birth date of the user. public DateTime BirthDate { get; set; } Property Value DateTime Email Gets or sets the email address of the user. public string Email { get; set; } Property Value string FirstName Gets or sets the first name of the user. public string FirstName { get; set; } Property Value string LastName Gets or sets the last name of the user. public string LastName { get; set; } Property Value string Password Gets or sets the password of the user. public string Password { get; set; } Property Value string PhoneNumber Gets or sets the phone number of the user. public string PhoneNumber { get; set; } Property Value string Roles Gets the roles associated with the user. public IReadOnlyList<Role> Roles { get; } Property Value IReadOnlyList<Role> Methods Activate() Reactivates a previously deleted user. public void Activate() AddRole(Role) Adds a role to the user. public void AddRole(Role role) Parameters role Role The role to add. RemoveRole(Role) Removes a role from the user. public void RemoveRole(Role role) Parameters role Role The role to remove. SoftDelete() Marks the user as deleted (soft delete). public void SoftDelete()"
  },
  "api/Rise.Domain.Users.html": {
    "href": "api/Rise.Domain.Users.html",
    "title": "Namespace Rise.Domain.Users | rise.buut",
    "keywords": "Namespace Rise.Domain.Users Classes Address Represents a user's address in the system. Role Represents a role assigned to a user in the system. User Represents a user entity in the system"
  },
  "api/Rise.Persistence.ApplicationDbContext.html": {
    "href": "api/Rise.Persistence.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | rise.buut",
    "keywords": "Class ApplicationDbContext Namespace Rise.Persistence Assembly Rise.Persistence.dll A DbContext instance represents a session with the database and can be used to query and save instances of your entities. DbContext is a combination of the Unit Of Work and Repository patterns. public class ApplicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads. Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute in parallel. See Avoiding DbContext threading issues for more information and examples. Typically you create a class that derives from DbContext and contains DbSet<TEntity> properties for each entity in the model. If the DbSet<TEntity> properties have a public setter, they are automatically initialized when the instance of the derived context is created. Override the OnConfiguring(DbContextOptionsBuilder) method to configure the database (and other options) to be used for the context. Alternatively, if you would rather perform configuration externally instead of inline in your context, you can use DbContextOptionsBuilder<TContext> (or DbContextOptionsBuilder) to externally create an instance of DbContextOptions<TContext> (or DbContextOptions) and pass it to a base constructor of DbContext. The model is discovered by running a set of conventions over the entity classes found in the DbSet<TEntity> properties on the derived context. To further configure the model that is discovered by convention, you can override the OnModelCreating(ModelBuilder) method. See DbContext lifetime, configuration, and initialization, Querying data with EF Core, Changing tracking, and Saving data with EF Core for more information and examples. Constructors ApplicationDbContext(DbContextOptions) public ApplicationDbContext(DbContextOptions options) Parameters options DbContextOptions Properties Addresses public DbSet<Address> Addresses { get; } Property Value DbSet<Address> Products public DbSet<Product> Products { get; } Property Value DbSet<Product> Roles public DbSet<Role> Roles { get; } Property Value DbSet<Role> Users public DbSet<User> Users { get; } Property Value DbSet<User> Methods ConfigureConventions(ModelConfigurationBuilder) Override this method to set defaults and configure conventions before they run. This method is invoked before OnModelCreating(ModelBuilder). protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder) Parameters configurationBuilder ModelConfigurationBuilder The builder being used to set defaults and configure conventions that will be used to build the model for this context. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Pre-convention model building in EF Core for more information and examples. OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/Rise.Persistence.Migrations.Initial.html": {
    "href": "api/Rise.Persistence.Migrations.Initial.html",
    "title": "Class Initial | rise.buut",
    "keywords": "Class Initial Namespace Rise.Persistence.Migrations Assembly Rise.Persistence.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApplicationDbContext))] [Migration(\"20240926211417_Initial\")] public class Initial : Migration Inheritance object Migration Initial Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Rise.Persistence.Migrations.addedUserTables.html": {
    "href": "api/Rise.Persistence.Migrations.addedUserTables.html",
    "title": "Class addedUserTables | rise.buut",
    "keywords": "Class addedUserTables Namespace Rise.Persistence.Migrations Assembly Rise.Persistence.dll A base class inherited by each EF Core migration. [DbContext(typeof(ApplicationDbContext))] [Migration(\"20241011055054_addedUserTables\")] public class addedUserTables : Migration Inheritance object Migration addedUserTables Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Rise.Persistence.Migrations.html": {
    "href": "api/Rise.Persistence.Migrations.html",
    "title": "Namespace Rise.Persistence.Migrations | rise.buut",
    "keywords": "Namespace Rise.Persistence.Migrations Classes Initial A base class inherited by each EF Core migration. addedUserTables A base class inherited by each EF Core migration."
  },
  "api/Rise.Persistence.Seeder.html": {
    "href": "api/Rise.Persistence.Seeder.html",
    "title": "Class Seeder | rise.buut",
    "keywords": "Class Seeder Namespace Rise.Persistence Assembly Rise.Persistence.dll Responsible for seeding the database with initial data. public class Seeder Inheritance object Seeder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Seeder(ApplicationDbContext) Initializes a new instance of the Seeder class with a specified ApplicationDbContext. public Seeder(ApplicationDbContext dbContext) Parameters dbContext ApplicationDbContext The database context used for seeding. Methods Seed() Seeds the database with initial data if it has not been seeded already. public void Seed()"
  },
  "api/Rise.Persistence.Triggers.EntityBeforeSaveTrigger.html": {
    "href": "api/Rise.Persistence.Triggers.EntityBeforeSaveTrigger.html",
    "title": "Class EntityBeforeSaveTrigger | rise.buut",
    "keywords": "Class EntityBeforeSaveTrigger Namespace Rise.Persistence.Triggers Assembly Rise.Persistence.dll Programmatic trigger, similar to a database trigger but database-agnostic. It works across various databases (e.g., swapping from Microsoft SQL Server to MariaDB). More info: https://github.com/koenbeuk/EntityFrameworkCore.Triggered public class EntityBeforeSaveTrigger : IBeforeSaveTrigger<Entity> Inheritance object EntityBeforeSaveTrigger Implements IBeforeSaveTrigger<Entity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityBeforeSaveTrigger(ApplicationDbContext) public EntityBeforeSaveTrigger(ApplicationDbContext dbContext) Parameters dbContext ApplicationDbContext Methods BeforeSave(ITriggerContext<Entity>) public void BeforeSave(ITriggerContext<Entity> context) Parameters context ITriggerContext<Entity>"
  },
  "api/Rise.Persistence.Triggers.html": {
    "href": "api/Rise.Persistence.Triggers.html",
    "title": "Namespace Rise.Persistence.Triggers | rise.buut",
    "keywords": "Namespace Rise.Persistence.Triggers Classes EntityBeforeSaveTrigger Programmatic trigger, similar to a database trigger but database-agnostic. It works across various databases (e.g., swapping from Microsoft SQL Server to MariaDB). More info: https://github.com/koenbeuk/EntityFrameworkCore.Triggered"
  },
  "api/Rise.Persistence.html": {
    "href": "api/Rise.Persistence.html",
    "title": "Namespace Rise.Persistence | rise.buut",
    "keywords": "Namespace Rise.Persistence Classes ApplicationDbContext A DbContext instance represents a session with the database and can be used to query and save instances of your entities. DbContext is a combination of the Unit Of Work and Repository patterns. Seeder Responsible for seeding the database with initial data."
  },
  "api/Rise.Server.Controllers.ProductController.html": {
    "href": "api/Rise.Server.Controllers.ProductController.html",
    "title": "Class ProductController | rise.buut",
    "keywords": "Class ProductController Namespace Rise.Server.Controllers Assembly Rise.Server.dll [ApiController] [Route(\"api/[controller]\")] public class ProductController : ControllerBase Inheritance object ControllerBase ProductController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductController(IProductService) public ProductController(IProductService productService) Parameters productService IProductService Methods Get() [HttpGet] public Task<IEnumerable<ProductDto>> Get() Returns Task<IEnumerable<ProductDto>>"
  },
  "api/Rise.Server.Controllers.UserController.html": {
    "href": "api/Rise.Server.Controllers.UserController.html",
    "title": "Class UserController | rise.buut",
    "keywords": "Class UserController Namespace Rise.Server.Controllers Assembly Rise.Server.dll API controller for managing user-related operations. [ApiController] [Route(\"api/[controller]\")] public class UserController : ControllerBase Inheritance object ControllerBase UserController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserController(IUserService) Initializes a new instance of the UserController class with the specified user service. public UserController(IUserService userService) Parameters userService IUserService The user service that handles user operations. Methods Get() Retrieves the current user asynchronously. [HttpGet] public Task<UserDto?> Get() Returns Task<UserDto> The current UserDto object or null if no user is found. Get(int) Retrieves a user by their ID asynchronously. [HttpGet(\"{id}\")] public Task<UserDto?> Get(int id) Parameters id int The ID of the user to retrieve. Returns Task<UserDto> The UserDto object or null if no user with the specified ID is found. GetDetails(int) Retrieves detailed information about a user by their ID asynchronously. [HttpGet(\"details/{id}\")] public Task<UserDto?> GetDetails(int id) Parameters id int The ID of the user to retrieve details for. Returns Task<UserDto> The detailed UserDto object or null if no user with the specified ID is found. Post(UserDto) Creates a new user asynchronously. [HttpPost] public Task<UserDto?> Post(UserDto user) Parameters user UserDto The UserDto object containing user details to create. Returns Task<UserDto> The created UserDto object or null if the user creation fails. Put(UserDto) Updates an existing user asynchronously. [HttpPut] public Task<bool> Put(UserDto user) Parameters user UserDto The UserDto object containing updated user details. Returns Task<bool> true if the update is successful; otherwise, false. Put(int) Deletes a user by their ID asynchronously. [HttpPut(\"{id}\")] public Task<bool> Put(int id) Parameters id int The ID of the user to delete. Returns Task<bool> true if the deletion is successful; otherwise, false."
  },
  "api/Rise.Server.Controllers.html": {
    "href": "api/Rise.Server.Controllers.html",
    "title": "Namespace Rise.Server.Controllers | rise.buut",
    "keywords": "Namespace Rise.Server.Controllers Classes ProductController UserController API controller for managing user-related operations."
  },
  "api/Rise.Services.Products.ProductService.html": {
    "href": "api/Rise.Services.Products.ProductService.html",
    "title": "Class ProductService | rise.buut",
    "keywords": "Class ProductService Namespace Rise.Services.Products Assembly Rise.Services.dll public class ProductService : IProductService Inheritance object ProductService Implements IProductService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductService(ApplicationDbContext) public ProductService(ApplicationDbContext dbContext) Parameters dbContext ApplicationDbContext Methods GetProductsAsync() public Task<IEnumerable<ProductDto>> GetProductsAsync() Returns Task<IEnumerable<ProductDto>>"
  },
  "api/Rise.Services.Products.html": {
    "href": "api/Rise.Services.Products.html",
    "title": "Namespace Rise.Services.Products | rise.buut",
    "keywords": "Namespace Rise.Services.Products Classes ProductService"
  },
  "api/Rise.Services.Users.UserService.html": {
    "href": "api/Rise.Services.Users.UserService.html",
    "title": "Class UserService | rise.buut",
    "keywords": "Class UserService Namespace Rise.Services.Users Assembly Rise.Services.dll public class UserService : IUserService Inheritance object UserService Implements IUserService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserService(ApplicationDbContext) public UserService(ApplicationDbContext dbContext) Parameters dbContext ApplicationDbContext Methods CreateUserAsync(UserDto) public Task<UserDto?> CreateUserAsync(UserDto user) Parameters user UserDto Returns Task<UserDto> DeleteUserAsync(int) public Task<bool> DeleteUserAsync(int id) Parameters id int Returns Task<bool> GetUserAsync() public Task<UserDto?> GetUserAsync() Returns Task<UserDto> GetUserByIdAsync(int) public Task<UserDto?> GetUserByIdAsync(int id) Parameters id int Returns Task<UserDto> GetUserDetailsAsync(int) public Task<UserDto?> GetUserDetailsAsync(int id) Parameters id int Returns Task<UserDto> UpdateUserAsync(UserDto) public Task<bool> UpdateUserAsync(UserDto user) Parameters user UserDto Returns Task<bool>"
  },
  "api/Rise.Services.Users.html": {
    "href": "api/Rise.Services.Users.html",
    "title": "Namespace Rise.Services.Users | rise.buut",
    "keywords": "Namespace Rise.Services.Users Classes UserService"
  },
  "api/Rise.Shared.Enums.RolesEnum.html": {
    "href": "api/Rise.Shared.Enums.RolesEnum.html",
    "title": "Enum RolesEnum | rise.buut",
    "keywords": "Enum RolesEnum Namespace Rise.Shared.Enums Assembly Rise.Shared.dll public enum RolesEnum Fields Admin = 0 Godparent = 2 User = 1"
  },
  "api/Rise.Shared.Enums.html": {
    "href": "api/Rise.Shared.Enums.html",
    "title": "Namespace Rise.Shared.Enums | rise.buut",
    "keywords": "Namespace Rise.Shared.Enums Enums RolesEnum"
  },
  "api/Rise.Shared.Products.IProductService.html": {
    "href": "api/Rise.Shared.Products.IProductService.html",
    "title": "Interface IProductService | rise.buut",
    "keywords": "Interface IProductService Namespace Rise.Shared.Products Assembly Rise.Shared.dll public interface IProductService Methods GetProductsAsync() Task<IEnumerable<ProductDto>> GetProductsAsync() Returns Task<IEnumerable<ProductDto>>"
  },
  "api/Rise.Shared.Products.ProductDto.html": {
    "href": "api/Rise.Shared.Products.ProductDto.html",
    "title": "Class ProductDto | rise.buut",
    "keywords": "Class ProductDto Namespace Rise.Shared.Products Assembly Rise.Shared.dll public class ProductDto Inheritance object ProductDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public required int Id { get; set; } Property Value int Name public required string Name { get; set; } Property Value string"
  },
  "api/Rise.Shared.Products.html": {
    "href": "api/Rise.Shared.Products.html",
    "title": "Namespace Rise.Shared.Products | rise.buut",
    "keywords": "Namespace Rise.Shared.Products Classes ProductDto Interfaces IProductService"
  },
  "api/Rise.Shared.Users.AddressDto.html": {
    "href": "api/Rise.Shared.Users.AddressDto.html",
    "title": "Class AddressDto | rise.buut",
    "keywords": "Class AddressDto Namespace Rise.Shared.Users Assembly Rise.Shared.dll Data Transfer Object (DTO) representing an address. public class AddressDto Inheritance object AddressDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bus Gets or sets the optional bus number for the address. public string? Bus { get; set; } Property Value string HouseNumber Gets or sets the house number of the address. public int HouseNumber { get; set; } Property Value int Street Gets or sets the street name of the address. public string Street { get; set; } Property Value string"
  },
  "api/Rise.Shared.Users.IUserService.html": {
    "href": "api/Rise.Shared.Users.IUserService.html",
    "title": "Interface IUserService | rise.buut",
    "keywords": "Interface IUserService Namespace Rise.Shared.Users Assembly Rise.Shared.dll public interface IUserService Methods CreateUserAsync(UserDto) Task<UserDto?> CreateUserAsync(UserDto user) Parameters user UserDto Returns Task<UserDto> DeleteUserAsync(int) Task<bool> DeleteUserAsync(int id) Parameters id int Returns Task<bool> GetUserAsync() Task<UserDto?> GetUserAsync() Returns Task<UserDto> GetUserByIdAsync(int) Task<UserDto?> GetUserByIdAsync(int id) Parameters id int Returns Task<UserDto> GetUserDetailsAsync(int) Task<UserDto?> GetUserDetailsAsync(int id) Parameters id int Returns Task<UserDto> UpdateUserAsync(UserDto) Task<bool> UpdateUserAsync(UserDto user) Parameters user UserDto Returns Task<bool>"
  },
  "api/Rise.Shared.Users.RoleDto.html": {
    "href": "api/Rise.Shared.Users.RoleDto.html",
    "title": "Class RoleDto | rise.buut",
    "keywords": "Class RoleDto Namespace Rise.Shared.Users Assembly Rise.Shared.dll Data Transfer Object (DTO) representing a user. public class RoleDto Inheritance object RoleDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets or sets the unique identifier of the role. public int Id { get; set; } Property Value int Name Gets or sets the name of the role. public RolesEnum Name { get; set; } Property Value RolesEnum"
  },
  "api/Rise.Shared.Users.UserDto.html": {
    "href": "api/Rise.Shared.Users.UserDto.html",
    "title": "Class UserDto | rise.buut",
    "keywords": "Class UserDto Namespace Rise.Shared.Users Assembly Rise.Shared.dll Data Transfer Object (DTO) representing a user. public class UserDto Inheritance object UserDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Address Gets or sets the address of the user. public AddressDto Address { get; set; } Property Value AddressDto BirthDate Gets or sets the birth date of the user. public DateTime BirthDate { get; set; } Property Value DateTime Email Gets or sets the email address of the user. public string Email { get; set; } Property Value string FirstName Gets or sets the first name of the user. public string FirstName { get; set; } Property Value string Id Gets or sets the unique identifier of the user. public int Id { get; set; } Property Value int LastName Gets or sets the last name of the user. public string LastName { get; set; } Property Value string Password Gets or sets the password of the user. public string Password { get; set; } Property Value string PhoneNumber Gets or sets the phone number of the user. public string PhoneNumber { get; set; } Property Value string Roles Gets or sets the list of roles assigned to the user. public List<RoleDto> Roles { get; set; } Property Value List<RoleDto>"
  },
  "api/Rise.Shared.Users.html": {
    "href": "api/Rise.Shared.Users.html",
    "title": "Namespace Rise.Shared.Users | rise.buut",
    "keywords": "Namespace Rise.Shared.Users Classes AddressDto Data Transfer Object (DTO) representing an address. RoleDto Data Transfer Object (DTO) representing a user. UserDto Data Transfer Object (DTO) representing a user. Interfaces IUserService"
  },
  "api/Xunit.ServiceCollectionLoggingExtensions.html": {
    "href": "api/Xunit.ServiceCollectionLoggingExtensions.html",
    "title": "Class ServiceCollectionLoggingExtensions | rise.buut",
    "keywords": "Class ServiceCollectionLoggingExtensions Namespace Xunit Assembly Rise.Client.Tests.dll Logging for xUnit helper class, taken from: https://bunit.dev/docs/misc-test-tips.html public static class ServiceCollectionLoggingExtensions Inheritance object ServiceCollectionLoggingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddXunitLogger(IServiceCollection, ITestOutputHelper) public static IServiceCollection AddXunitLogger(this IServiceCollection services, ITestOutputHelper outputHelper) Parameters services IServiceCollection outputHelper ITestOutputHelper Returns IServiceCollection"
  },
  "api/Xunit.html": {
    "href": "api/Xunit.html",
    "title": "Namespace Xunit | rise.buut",
    "keywords": "Namespace Xunit Classes ServiceCollectionLoggingExtensions Logging for xUnit helper class, taken from: https://bunit.dev/docs/misc-test-tips.html"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | rise.buut",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | rise.buut",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | rise.buut",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}