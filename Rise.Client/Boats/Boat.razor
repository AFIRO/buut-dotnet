@page "/boats"
@using Microsoft.Extensions.Localization
@using System.ComponentModel.DataAnnotations
@using Rise.Shared.Boats
@attribute [Authorize(Roles = "Admin")]
@inject IStringLocalizer<Boat> Localizer

<div class="text-white">
    <h1 class="text-white">@Localizer["Title"]</h1>

    @if (_boats == null)
    {
        <div class="loading-container" style="background-color: transparent;">
            <div class="spinner-border text-primary" role="status">
                <span>@Localizer["Loading"]</span>
            </div>
        </div>
    }
    else if (!_boats.Any())
    {
         <div class="error-container" style="background-color: transparent;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">@Localizer["NoBoatsFound"]</span>
            </div>
        </div>       
    }
    else
    { 
      <div class="card">
            <div class="table-responsive">
                <table class="table align-items-center mb-0">
                    <thead>
                        <tr>
                            <th class="text-uppercase text-secondary fs-6 text-xxs font-weight-bolder opacity-7">@Localizer["Name"]</th>
                            <th class="text-uppercase text-secondary fs-6 text-xxs font-weight-bolder opacity-7 ps-2 text-center">@Localizer["CountBookings"]</th>
                            <th class="text-uppercase text-secondary fs-6 text-xxs font-weight-bolder opacity-7 ps-2 text-center">@Localizer["Comments"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var boat in _boats)
                        {
                            <tr >
                                <td class="p-4">                                    
                                    <h6 class="mb-0 text-m">@boat.name</h6>                                            
                                </td>
                                <td class="p-4 text-center">                                   
                                    <p class="text-m text-secondary mb-0">@boat.countBookings</p>                                        
                                </td>            
                                <td class="p-4  text-center">
                                    <p class="text-m text-secondary mb-0">@boat.listComments</p>   
                                </td >         
                                
                            </tr>
                        }
                    </tbody>
            </table>
        </div>
    </div>
    }       
        @if (!formIsShown)
        {
             
                <button class="btn btn-primary mt-2"
                        @onclick="ShowForm">
                    @Localizer["AddBoat"]
                </button>
            
        }
        else
        {
        <EditForm EditContext="editContext" OnSubmit="Confirm">
    <DataAnnotationsValidator />

    <div class="mt-2 d-flex align-items-center gap-2">
        <div class="col-auto">
            <InputText class="form-control mb-2" @bind-Value="equipmentModel.Name" id="inlineFormInput" placeholder="@Localizer["EnterBoatName"]" />
            
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-success mb-2">
                @Localizer["Submit"]
            </button>
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-danger mb-2" @onclick="Cancel">
                @Localizer["Cancel"]
            </button>
        </div>
    </div>
    <div class="mt-2 d-flex align-items-center gap-2">
        <ValidationMessage For="() => equipmentModel.Name" />
    </div>
</EditForm>
        }   
    

  
</div>

@code {
    private bool formIsShown = false;
    private EquipmentModel equipmentModel = new EquipmentModel();
    private IEnumerable<BoatDto.ViewBoat>? _boats;
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;

    [Inject] public required IBoatService BoatService { get; set; }

    public class EquipmentModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        _boats = await BoatService.GetAllAsync();
         editContext = new EditContext(equipmentModel);
         validationMessageStore = new ValidationMessageStore(editContext);
    }

    private void ShowForm()
    {
        
        formIsShown = true;
    }

    private async Task Confirm()
     {        
        
            ClearValidationMessages();

            if (!editContext.Validate()) // Handmatige validatie
        {
            return; // Stop de submit als de validatie niet slaagt
        }

            try
            {                
                var newBoat = new BoatDto.NewBoat { name = equipmentModel.Name };
                var response = await BoatService.CreateBoatAsync(newBoat);
                _boats = await BoatService.GetAllAsync();
                formIsShown = false;
            }
            catch (Exception e)
            {
                
                AddValidationError(nameof(equipmentModel.Name), e.Message);
            }
        
    }

    private void Cancel()
    {
        ClearValidationMessages();
        equipmentModel.Name = string.Empty;
        formIsShown = false;
    }

    // Voeg validatiefout toe voor een specifiek veld
    private void AddValidationError(string field, string errorMessage)
    {
        var fieldIdentifier = new FieldIdentifier(equipmentModel, field);
        validationMessageStore.Add(fieldIdentifier, errorMessage);

        editContext.NotifyValidationStateChanged();
    }

    private void ClearValidationMessages()
{
    validationMessageStore.Clear(); // Wis alle validatieberichten
    Console.WriteLine("Validation messages cleared");
    editContext.NotifyValidationStateChanged(); // Meld dat de validatiestatus is bijgewerkt
}

}




