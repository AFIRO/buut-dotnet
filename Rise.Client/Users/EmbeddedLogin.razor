@page "/embedded-login"
@inject HttpClient HttpClient
@using System.Text.Json
@using System.Text
@using Microsoft.Extensions.Localization
@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IStringLocalizer<Login> Localizer;
@inject IConfiguration Config;

<main class="main-content mt-0">
    <div class="page-header align-items-center min-vh-100">
        <div class="container my-auto">
            <div class="row">
                <div class="col-lg-6 col-md-8 col-sm-10 col-12 mx-auto">
                    <!-- Adjusted column sizes for larger screens -->
                    <div class="card z-index-0 fadeIn3 fadeInBottom" style="max-width: 440px;">
                        <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                            <div class="bg-gradient-dark shadow-dark border-radius-lg py-3 pe-1">
                                <h1 class="text-white ms-3">@Localizer["Login"]</h1>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="form-card">
                                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                                    <DataAnnotationsValidator />
                                    <div class="d-flex flex-column align-items-center px-3">
                                        <div
                                            class="d-md-flex flex-column flex-md-row justify-content-center align-items-center mb-2">
                                            <label style="min-width: 80px;">@Localizer["Email"]: </label>
                                            <InputText @bind-Value="loginModel.Email" class="form-control" />
                                        </div>
                                        <ValidationMessage For="@(() => loginModel.Email)" />

                                        <div
                                            class="d-md-flex flex-column flex-md-row justify-content-center align-items-center mb-2">
                                            <label style="min-width: 80px;">@Localizer["Password"]: </label>
                                            <InputText @bind-Value="loginModel.Password" type="password"
                                                class="form-control" />
                                        </div>
                                        <ValidationMessage For="@(() => loginModel.Password)" />
                                    </div>
                                    @* Display custom login error message *@
                                    @if (!string.IsNullOrEmpty(loginError))
                                    {
                                        <div class="text-danger mt-1 p-0">
                                            @loginError
                                        </div>
                                    }
                                    <div class="d-flex flex-wrap justify-content-center gap-2 mt-2">
                                        <button type="submit" class="btn btn-primary mb-0"
                                            style="min-width: 160px;">@Localizer["Login"]</button>
                                        <button type="button" class="btn btn-secondary mb-0" style="min-width: 160px;"
                                            @onclick="HandleCancelClick">@Localizer["Cancel"]</button>
                                    </div>

                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>


@* <main class="main-content mt-0">
<div class="page-header align-items-center min-vh-100">
<div class="container my-auto">
<div class="row">
<div class="col-lg-4 col-md-8 col-12 mx-auto">
<div class="card z-index-0 fadeIn3 fadeInBottom">
<div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
<div class="bg-gradient-dark shadow-dark border-radius-lg py-3 pe-1">
<h1 class="text-white ms-3">@Localizer["Login"]</h1>
</div>
</div>
<div class="card-body">
<div class="form-card">
<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
<DataAnnotationsValidator />

<div class="d-flex flex-column align-items-center px-3">
<div
class="d-md-flex flex-column flex-md-row justify-content-center align-items-center mb-2">
<label style="min-width: 80px;">@Localizer["Email"]: </label>
<InputText @bind-Value="loginModel.Email" />
</div>
<ValidationMessage For="@(() => loginModel.Email)" />

<div
class="d-md-flex flex-column flex-md-row justify-content-center align-items-center mb-2">
<label style="min-width: 80px;">@Localizer["Password"]: </label>
<InputText @bind-Value="loginModel.Password" type="password" />
</div>
<ValidationMessage For="@(() => loginModel.Password)" />
</div>

@if (!string.IsNullOrEmpty(loginError))
{
<div class="text-danger mt-1 p-0">
@loginError
</div>
}
<div class="d-flex flex-wrap justify-content-center gap-2 mt-2">
<button type="submit" class="btn btn-primary mb-0">@Localizer["Login"]</button>
<button type="button" class="btn btn-secondary mb-0"
@onclick="HandleCancelClick">@Localizer["Cancel"]</button>
</div>

</EditForm>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</main> *@


@code {
    private LoginModel loginModel = new LoginModel();
    private string? loginError;

    private void HandleCancelClick()
    {
        NavigationManager.NavigateTo("/");
    }
    private async Task HandleLogin()
    {
        try
        {
            // Retrieve configuration values from the Auth0Settings section
            var authority = Config["Auth0Settings:Authority"];
            var clientId = Config["Auth0Settings:ClientId"];
            var clientSecret = Config["Auth0Settings:ClientSecret"];
            var audience = Config["Auth0Settings:Audience"];
            var tokenUri = Config["Auth0Settings:TokenUri"];
            // Prepare the request payload for Auth0's token endpoint
            var loginRequest = new
            {
                grant_type = "password",
                client_id = clientId,
                client_secret = clientSecret,
                username = loginModel.Email,
                password = loginModel.Password,
                audience = audience, // If using a custom API
                scope = "openid profile email"
            };

            var jsonRequest = JsonSerializer.Serialize(loginRequest);
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            // Send the login request
            var response = await HttpClient.PostAsync(tokenUri, content);
            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var authResult = JsonSerializer.Deserialize<AuthResponse>(jsonResponse);

                var accessToken = authResult?.access_token;

                if (accessToken != null)
                {
                    // Store access token (in session storage or any preferred storage)
                    await js.InvokeVoidAsync("sessionStorage.setItem", "access_token", accessToken);

                    // Notify the authentication state provider
                    if (AuthStateProvider is CustomAuthStateProvider customAuthStateProvider)
                    {
                        customAuthStateProvider.NotifyUserAuthentication(accessToken);
                    }
                    loginError = null;
                    // Redirect or update authentication state
                    NavigationManager.NavigateTo("/");
                }

            }
            else
            {
                loginError = Localizer["WrongCreds"];
            }
        }
        catch (Exception ex)
        {
            loginError = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class AuthResponse
    {
        public string access_token { get; set; }
        public string id_token { get; set; }
        public int expires_in { get; set; }
        public string token_type { get; set; }
    }
}
