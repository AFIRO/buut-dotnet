@page "/authusers"
@using Microsoft.Extensions.Localization
@using Rise.Shared.Users
@inject IUserService UserService
@attribute [Authorize(Roles = "Admin")]
@inject IStringLocalizer<UserManagement> Localizer;

<PageTitle>@Localizer["Auth0Users"]</PageTitle>
<div class="text-white">
    <h1>@Localizer["Auth0Users"]</h1>

    <p>@Localizer["DemoFetch"]</p>

    @if (users is null)
    {
        <div class="loading-container" style="background-color: transparent;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <table class="table text-white">
            <thead>
                <tr>
                    <th scope="col">@Localizer["Email"]</th>
                    <th scope="col">@Localizer["Firstname"]</th>
                    <th scope="col">@Localizer["Lastname"]</th>
                    <th scope="col">@Localizer["Blocked"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td scope="row">@user.Email</td>
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Blocked</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@code {

    [Parameter] public EventCallback<string> OnUserSelected { get; set; }
    private IEnumerable<UserDto.Auth0User>? users;
    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAuth0Users();
    }

    private void HandleUserClick(string userId)
    {
        OnUserSelected.InvokeAsync(userId);
    }
}