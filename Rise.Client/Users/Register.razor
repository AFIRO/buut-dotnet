@page "/register"
@using Rise.Shared.Enums
@using Rise.Shared.Users
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IUserService UserService
<link href="css/shared-form.css" rel="stylesheet" />

<PageTitle>Register</PageTitle>

<h1 class="form-title">Register</h1>

<div class="form-card">

    <EditForm Model="newUser" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <div class="form-items">
            <div>
                <label class="form-label" for="FirstName">First Name: </label>
                <InputText class="form-input" id="FirstName" @bind-Value="newUser.FirstName" placeholder="First Name" />
                <ValidationMessage For="@(() => newUser.FirstName)" />
            </div>
            <div>
                <label class="form-label" for="LastName">Last Name: </label>
                <InputText class="form-input" id="LastName" @bind-Value="newUser.LastName" placeholder="Last Name" />
                <ValidationMessage For="@(() => newUser.LastName)" />
            </div>
            <div>
                <label class="form-label" for="Email">Email: </label>
                <InputText class="form-input" type="email" id="Email" @bind-Value="newUser.Email" placeholder="Email" />
                <ValidationMessage For="@(() => newUser.Email)" />
            </div>
            <div>
                <label class="form-label" for="PhoneNumber">Phone number: </label>
                <InputText class="form-input" type="tel" id="PhoneNumber" @bind-Value="newUser.PhoneNumber"
                    placeholder="Phone number" />
                <ValidationMessage For="@(() => newUser.PhoneNumber)" />
            </div>
            <div>
                <label class="form-label" for="Password">Password: </label>
                <InputText class="form-input" type="password" id="Password" @bind-Value="newUser.Password"
                    placeholder="Password" />
                <ValidationMessage For="@(() => newUser.Password)" />
            </div>
            <div>
                <label class="form-label" for="ConfirmPassword">Confirm password: </label>
                <InputText class="form-input" type="password" id="ConfirmPassword" @bind-Value="confirmPassword"
                    placeholder="Confirm Password" />
                <ValidationMessage For="@(() => confirmPassword)" />
            </div>
            <div>
                <label class="form-label" for="BirthDate">Birthdate: </label>
                <InputDate class="form-input" id="BirthDate" @bind-Value="newUser.BirthDate" />
                <ValidationMessage For="@(() => newUser.BirthDate)" />
            </div>
            <div>
                <label class="form-label" for="Street">Select your address:</label>
                <InputSelect class="form-input" id="Street" @bind-Value="newUser.Address.Street">
                    @foreach (var street in Enum.GetValues(typeof(StreetEnum)).Cast<StreetEnum>())
                    {
                        <option value="@street">@street.GetStreetName()</option>
                    }
                </InputSelect>
            </div>

            <div class="d-flex flex-row">
                <div class="d-flex flex-column">
                    <div>
                        <label class="form-label-small" for="Address.HouseNumber">House number: </label>
                        <InputText class="form-input-small" id="HouseNumber"
                            @bind-Value="newUser.Address.HouseNumber" placeholder="nr" />
                    </div>
                    <ValidationMessage For="@(() => newUser.Address.HouseNumber)" />
                </div>
                <div>
                    <label class="form-label-small" for="Address.Bus">Bus: </label>
                    <InputText class="form-input-small" id="Bus" @bind-Value="newUser.Address.Bus"
                        placeholder="Bus" />
                    <ValidationMessage For="@(() => newUser.Address.Bus)" />
                </div>
            </div>

            <span>Already have an account? <a class="form-link" href="login">Login</a></span>

            <div class="form-buttons">
                <button class="form-btn btn-primary" type="submit">Register</button>
                <button class="form-btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>



    @* <div class="form-items">
    <div>
    <label class="form-label" for="firstName">First Name: </label>
    <input class="form-input" type="text" @bind="newUser.FirstName" placeholder="First Name" />
    </div>
    <div>
    <label class="form-label" for="lastName">Last Name: </label>
    <input class="form-input" type="text" @bind="newUser.LastName" placeholder="Last Name" />
    </div>
    <div>
    <label class="form-label" for="Email">Email: </label>
    <input class="form-input" type="email" @bind="newUser.Email" placeholder="Email" />
    </div>
    <div>
    <label class="form-label" for="phoneNumber">Phone number: </label>
    <input class="form-input" type="tel" @bind="newUser.PhoneNumber" placeholder="Phone number" />
    </div>
    <div>
    <label class="form-label" for="password">Password: </label>
    <input class="form-input" type="password" @bind="password" placeholder="Password" />
    </div>
    <div>
    <label class="form-label" for="confirmPassword">Confirm password: </label>
    <input class="form-input" type="password" @bind="confirmPassword" placeholder="Confirm Password" />
    </div>
    <div>
    <label class="form-label" for="birthDate">Birthdate: </label>
    <input class="form-input" type="date" @bind="newUser.BirthDate" />
    </div>
    <div>
    <label class="form-label" for="street">Select your address:</label>
    <InputSelect class="form-input" id="street" @bind-Value="newUser.Address.Street">
    @foreach (var street in Enum.GetValues(typeof(StreetEnum)).Cast<StreetEnum>())
    {
    <option value="@street">@street.GetStreetName()</option>
    }
    </InputSelect>
    </div>
    <div class="d-flex flex-row">
    <div>
    <label class="form-label-small" for="houseNumber">House number: </label>
    <input class="form-input-small" type="text" @bind="newUser.Address.HouseNumber" placeholder="nr" />
    </div>
    <div>
    <label class="form-label-small" for="bus">Bus: </label>
    <input class="form-input-small" type="text" @bind="newUser.Address.Bus" placeholder="Bus" />
    </div>
    </div>


    </div>
    <span>Already have an account? <a class="form-link" href="login">Login</a></span>

    <div class="form-buttons">
    <button class="form-btn btn-primary" type="button" @onclick="Submit">Register</button>
    <button class="form-btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
    </div> *@

</div>

@if (isSubmitted)
{
    <div class="form-card">
    <h2>Thank you for registering!</h2>
    <p>@(userCreated ? "Your account has been created successfully." : "Failed to create account.")</p>
    <p>firstname: @newUser.FirstName</p>
    <p>lastname: @newUser.LastName</p>
    <p>email: @newUser.Email</p>
    <p>birthdate: @newUser.BirthDate</p>
    <p>street: @newUser.Address.Street</p>
    <p>house number: @newUser.Address.HouseNumber</p>
    <p>bus: @newUser.Address.Bus</p>
</div>
}

@code {

    private UserDto.CreateUser newUser = new();
    
    private string? confirmPassword;

    private bool userCreated = false;

    private bool isSubmitted = true;

    private async Task Submit()
    {
        if (newUser.Password != null && newUser.Password != confirmPassword)
        {
            return;
        }
        isSubmitted = true;
        userCreated = await UserService.CreateUserAsync(newUser);
        @* NavigationManager.NavigateTo("/login"); *@
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/login");
    }
}