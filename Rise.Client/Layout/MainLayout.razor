@inherits LayoutComponentBase
@using System.Globalization
@using Rise.Client.Utils.Navigation
@inject Microsoft.Extensions.Localization.IStringLocalizer<MainLayout> Localizer

<div xmlns="http://www.w3.org/1999/html">

    @* Required *@
        <MudPopoverProvider />
        <MudThemeProvider />

        @* Needed for dialogs *@
        <MudDialogProvider />

        @* Needed for snackbars *@
        <MudSnackbarProvider />

    <NavBar />
    @if (currentLink == null || currentLink.RenderHeader)
    {
        <Header Image="@currentLink?.BackgroundImage" PageClass="@currentLink?.PageClass">
            @Body
        </Header>
    }
    else
    {
        @Body
    }


    <Footer />
</div>


@code {
    [Inject] IJSRuntime js { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }

    private string _headerImage = "img/buut_BG.png";

    private string selectedCulture = "en-US";

    private PageInfo? currentLink;


    protected override async Task OnInitializedAsync()
    {
        // Get the culture from localStorage using JavaScript interop
        var storedCulture = await js.InvokeAsync<string>("blazorCulture.get");

        if (!string.IsNullOrEmpty(storedCulture))
        {
            selectedCulture = storedCulture;
        }

        NavigationManager.LocationChanged += OnLocationChanged;
        SetCurrentLink();
    }

    private async void ChangeLanguage(ChangeEventArgs e)
    {
        var culture = new CultureInfo(e.Value.ToString());

        // Store the selected culture in localStorage
        await js.InvokeVoidAsync("blazorCulture.set", culture.Name);

        // Reload the page to apply the new culture
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); ;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Update the current link whenever the URL changes
        SetCurrentLink();
        StateHasChanged(); // Trigger re-render
    }

    private void SetCurrentLink()
    {
        // Logic to set the current link based on the URL
        currentLink = NavigationService.GetPageInfos()
            .Find(link => link.Url.Equals(NavigationManager.ToBaseRelativePath(NavigationManager.Uri)));
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed to avoid memory leaks
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
