@page "/MakeBookingView"
@using Microsoft.IdentityModel.Tokens
@using Ardalis.GuardClauses
@using System.Globalization
@using Rise.Shared.Bookings
@using Rise.Shared.Enums
@using System.Collections
@inject HttpClient HttpClient
@inject Microsoft.Extensions.Localization.IStringLocalizer<MakeBookingView> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider


<main class="main-content mt-0">
    <div class="page-header align-items-center min-vh-100">
        <div class="container my-auto">

            <PageTitle>@Localizer["Title"]</PageTitle>

            <div class="bg-gradient-dark shadow-dark">
                <MudCalendar Items="_events" MonthCellMinHeight="100" DateRangeChanged="DateRangeChanged">
                    <CellTemplate>
                        <div style="width: 100%; height: 100%; border: 2px solid white">
                            <div style="background-color: @(((CustomCalenderItem)context).Color);
                                        cursor: @(((CustomCalenderItem)context).Available ? "pointer" : "default");"
                                 @onclick="@(((CustomCalenderItem)context).Available ? () => ItemClicked((CustomCalenderItem)context) : null)">
                                <MudText Style="color: #ffffff;" Typo="Typo.body1" Align="Align.Center">
                                    @(((CustomCalenderItem)context).Text)
                                </MudText>
                            </div>
                        </div>
                    </CellTemplate>
                </MudCalendar>
            </div>

        </div>
    </div>
</main>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] public required IBookingService BookingService { get; set; }

    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Retrieve the user's ID (sub claim in Auth0)
            userId = user.FindFirst(c => c.Type == "sub")?.Value;
        }
    }

    private List<CustomCalenderItem> _events { get; set; } = new List<CustomCalenderItem>();

    private class CustomCalenderItem : CalendarItem
    {
        // Map TimeSlot to Color
        private static readonly Dictionary<TimeSlot, string> TimeSlotColors = new()
        {
            { TimeSlot.Morning, "#c6cc25" },
            { TimeSlot.Afternoon, "Green" },
            { TimeSlot.Evening, "Purple" },
            { TimeSlot.None, "White" } // Default color for unavailable or undefined slots
        };

        private string _color = TimeSlotColors[TimeSlot.None];
        private bool _available;

        public string Color
        {
            get => _color;
            set => _color = value;
        }

        public bool Available
        {
            get => _available;
            set
            {
                if (value)
                {
                    // Determine TimeSlot based on Start.Hour and set color
                    var timeSlot = TimeSlotEnumExtensions.ToTimeSlot(Start.Hour);
                    Color = TimeSlotColors.TryGetValue(timeSlot, out var color) ? color : TimeSlotColors[TimeSlot.None];
                }
                else
                {
                    Color = TimeSlotColors[TimeSlot.None];
                }

                _available = value;
            }
        }
    }

    private async Task ItemClicked(CustomCalenderItem item)
    {
        var result = await DialogService.ShowMessageBox(
            Localizer["MakeBookingTitle"],
            Localizer["MakeBookingMessage"] + " " + item.Start.ToString("dd MMMM", new CultureInfo(Localizer["DateLanguage"])) + " " + item.Text,
            Localizer["MakeBookingYes"],
            Localizer["MakeBookingNo"]
        );

        if (result == true)
            ReserveTimeslot(item);
    }

    private async void ReserveTimeslot(CustomCalenderItem item)
    {
        var _booking = new BookingDto.NewBooking
        {
            bookingDate = item.Start,
            timeSlot = TimeSlotEnumExtensions.ToTimeSlot(item.Start.Hour),
            userId = userId!
        };

        try
        {
            await BookingService.CreateBookingAsync(_booking);
            item.Available = false;
        }
        catch (Exception e)
        {
            ShowErrorDialog(Localizer["DlgBookingErrorTtl"], Localizer["DlgBookingErrorMsg"]);
        }

        StateHasChanged();
    }

    @* if the range is changed get the bookings from that month *@
    private async void DateRangeChanged(DateRange dateRange)
    {
        _events = await getNewTimeSlots(dateRange);

        StateHasChanged();
    }

    private async Task<List<CustomCalenderItem>> getNewTimeSlots(DateRange dateRange)
    {
        var freeTimeSlots = await GetFreeCalendarItems(dateRange);

        var allTimeSlots = GenerateCalendarItems(dateRange);


        foreach (var item in allTimeSlots)
        {
            // Check if item exists in the free bookings (by comparing Start and End)
            if (freeTimeSlots.Any(i => i.Start == item.Start && i.End == item.End))
            {
                item.Available = true;
            }
        }

        return allTimeSlots;
    }

    @* booking generator for dateRange *@
    List<CustomCalenderItem> GenerateCalendarItems(DateRange dateRange)
    {
        var events = new List<CustomCalenderItem>();
        var startDate = Guard.Against.Null(dateRange.Start);
        var endDate = Guard.Against.Null(dateRange.End);

        // Loop over each day in the date range
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            // Add sample events for each day
            events.Add(new CustomCalenderItem
            {
                Start = date.AddHours(TimeSlot.Morning.GetStartHour()),
                End = date.AddHours(TimeSlot.Morning.GetEndHour()),
                Text = Localizer["Forenoon"],
                Available = false
            });

            events.Add(new CustomCalenderItem
            {
                Start = date.AddHours(TimeSlot.Afternoon.GetStartHour()),
                End = date.AddHours(TimeSlot.Afternoon.GetEndHour()),
                Text = Localizer["Noon"],
                Available = false
            });

            events.Add(new CustomCalenderItem
            {
                Start = date.AddHours(TimeSlot.Evening.GetStartHour()),
                End = date.AddHours(TimeSlot.Evening.GetEndHour()),
                Text = Localizer["Afternoon"],
                Available = false
            });
        }

        return events;
    }

    private async Task<List<CustomCalenderItem>> GetFreeCalendarItems(DateRange dateRange)
    {
        var freeTimeslots = await BookingService.GetFreeTimeslotsInDateRange(dateRange.Start, dateRange.End);
        ArrayList freeCalendarItems = [];

        foreach (var timeslot in freeTimeslots)
        {
            freeCalendarItems.Add(
                new CustomCalenderItem
                {
                    Start = GetTimeFromTimeslot(timeslot.BookingDate, timeslot),
                    End = GetTimeFromTimeslot(timeslot.BookingDate, timeslot, true),
                    Text = "Occupied"
                });
        }

        return freeCalendarItems.Cast<CustomCalenderItem>().ToList();
    }

    private DateTime GetTimeFromTimeslot(DateTime date, BookingDto.ViewBookingCalender timeSlot, bool isEnd = false)
    {
        switch (timeSlot.TimeSlot)
        {
            case TimeSlot.Morning:
                return isEnd ? date.AddHours(TimeSlot.Morning.GetEndHour()) : date.AddHours(TimeSlot.Morning.GetStartHour());
            case TimeSlot.Afternoon:
                return isEnd ? date.AddHours(TimeSlot.Afternoon.GetEndHour()) : date.AddHours(TimeSlot.Afternoon.GetStartHour());
            case TimeSlot.Evening:
                return isEnd ? date.AddHours(TimeSlot.Evening.GetEndHour()) : date.AddHours(TimeSlot.Evening.GetStartHour());
        }

        return DateTime.MinValue;
    }

    private void ShowErrorDialog(string title, string message)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        DialogService.ShowMessageBox(
            $"{title}",
            $"{message}",
            "ok",
            options: options
        );
    }

}