@page "/MakeBookingView"
@using Ardalis.GuardClauses
@using System.Globalization
@using Rise.Shared.Bookings
@using Rise.Shared.Enums
@using System.Collections
@inject Microsoft.Extensions.Localization.IStringLocalizer<MakeBookingView> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudCalendar Class="bookingCalendar" Items="_events" MonthCellMinHeight="100" DateRangeChanged="DateRangeChanged">
    <CellTemplate>
        <div class="pb-1" style="width: 100%; height: 100%; border: 1px solid white">
            <div class="timeslot" style="background-color: @(((CustomCalenderItem)context).Color);
                        cursor: @(((CustomCalenderItem)context).Available ? "pointer" : "default");"
                 @onclick="@(((CustomCalenderItem)context).Available ? () => ItemClicked((CustomCalenderItem)context) : null)">
                <MudText Style="color: #ffffff; text-align: start; margin-left: 4px; overflow: hidden; display: flex; flex-direction: row; gap: 4px; " Typo="Typo.body1" Align="Align.Center">
                    @if (((CustomCalenderItem)context).Available)
                    {
                        <svg id="ship" fill="white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M192 32c0-17.7 14.3-32 32-32L352 0c17.7 0 32 14.3 32 32l0 32 48 0c26.5 0 48 21.5 48 48l0 128 44.4 14.8c23.1 7.7 29.5 37.5 11.5 53.9l-101 92.6c-16.2 9.4-34.7 15.1-50.9 15.1c-19.6 0-40.8-7.7-59.2-20.3c-22.1-15.5-51.6-15.5-73.7 0c-17.1 11.8-38 20.3-59.2 20.3c-16.2 0-34.7-5.7-50.9-15.1l-101-92.6c-18-16.5-11.6-46.2 11.5-53.9L96 240l0-128c0-26.5 21.5-48 48-48l48 0 0-32zM160 218.7l107.8-35.9c13.1-4.4 27.3-4.4 40.5 0L416 218.7l0-90.7-256 0 0 90.7zM306.5 421.9C329 437.4 356.5 448 384 448c26.9 0 55.4-10.8 77.4-26.1c0 0 0 0 0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 501.7 417 512 384 512c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.4 27.3-10.1 39.2-1.7c0 0 0 0 0 0C136.7 437.2 165.1 448 192 448c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0z"/></svg>
                    }
                    @(((CustomCalenderItem)context).Text)
                </MudText>
            </div>
        </div>
    </CellTemplate>
</MudCalendar>


@code {
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] public required IBookingService BookingService { get; set; }

    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Retrieve the user's ID (sub claim in Auth0)
            userId = user.FindFirst(c => c.Type == "sub")?.Value;
        }
    }

    private List<CustomCalenderItem> _events { get; set; } = new List<CustomCalenderItem>();

    private class CustomCalenderItem : CalendarItem
    {
        // Map TimeSlot to Color
        private static readonly Dictionary<TimeSlot, string> TimeSlotColors = new()
        {
            { TimeSlot.Morning, "#FF00696D" },
            { TimeSlot.Afternoon, "#FF4A6364" },
            { TimeSlot.Evening, "#FF4E5F7D" },
            { TimeSlot.None, "White" } // Default color for unavailable or undefined slots
        };

        private string _color = TimeSlotColors[TimeSlot.None];
        private bool _available;

        
        public string Color
        {
            get => _color;
            set => _color = value;
        }

        public bool Available
        {
            get => _available;
            set
            {
                if (value)
                {
                    // Determine TimeSlot based on Start.Hour and set color
                    var timeSlot = TimeSlotEnumExtensions.ToTimeSlot(Start.Hour);
                    Color = TimeSlotColors.TryGetValue(timeSlot, out var color) ? color : TimeSlotColors[TimeSlot.None];
                }
                else
                {
                    Color = TimeSlotColors[TimeSlot.None];
                }

                _available = value;
            }
        }
    }

    private async Task ItemClicked(CustomCalenderItem item)
    {
        var result = await DialogService.ShowMessageBox(
            Localizer["MakeBookingTitle"],
            Localizer["MakeBookingMessage"] + " " + item.Start.ToString("dd MMMM", new CultureInfo(Localizer["DateLanguage"])) + " " + item.Text,
            Localizer["MakeBookingYes"],
            Localizer["MakeBookingNo"]
        );

        if (result == true)
            ReserveTimeslot(item);
    }

    private async void ReserveTimeslot(CustomCalenderItem item)
    {
        var _booking = new BookingDto.NewBooking
        {
            bookingDate = item.Start,
            // timeSlot = TimeSlotEnumExtensions.ToTimeSlot(item.Start.Hour),
            userId = userId!
        };

        try
        {
            await BookingService.CreateBookingAsync(_booking);
            item.Available = false;
            var message = Localizer["DlgBookingCompletePt1", _booking.bookingDate.ToString("d"), _booking.bookingDate.TimeOfDay];

            var markupMessage = new MarkupString(message);
            
            await DialogService.ShowMessageBox(
                @Localizer["DlgBookingCompleteTtl"],
                markupMessage);
        }
        catch (Exception e)
        {
            ShowErrorDialog(Localizer["DlgBookingErrorTtl"], Localizer["DlgBookingErrorMsg"]);
        }

        StateHasChanged();
    }


    @* if the range is changed get the bookings from that month *@
    private async void DateRangeChanged(DateRange dateRange)
    {
        _events = await getNewTimeSlots(dateRange);
        StateHasChanged();
    }

    private async Task<List<CustomCalenderItem>> getNewTimeSlots(DateRange dateRange)
    {
        var freeTimeSlots = await GetFreeCalendarItems(dateRange);

        var allTimeSlots = GenerateCalendarItems(dateRange);


        foreach (var item in allTimeSlots)
        {
            // Check if item exists in the free bookings (by comparing Start and End)
            if (freeTimeSlots.Any(i => i.Start == item.Start && i.End == item.End))
            {
                item.Available = true;
            }
        }

        return allTimeSlots;
    }

    private async Task<List<CustomCalenderItem>> GetFreeCalendarItems(DateRange dateRange)
    {
        var freeTimeslots = await BookingService.GetFreeTimeslotsInDateRange(dateRange.Start, dateRange.End);
        ArrayList freeCalendarItems = [];

        foreach (var timeslot in freeTimeslots)
        {
            freeCalendarItems.Add(
                new CustomCalenderItem
                {
                    Start = GetTimeFromTimeslot(timeslot.BookingDate, timeslot),
                    End = GetTimeFromTimeslot(timeslot.BookingDate, timeslot, true),
                    Text = "Occupied"
                });
        }

        return freeCalendarItems.Cast<CustomCalenderItem>().ToList();
    }

    @* booking generator for dateRange *@
    List<CustomCalenderItem> GenerateCalendarItems(DateRange dateRange)
    {
        var events = new List<CustomCalenderItem>();
        var startDate = Guard.Against.Null(dateRange.Start);
        var endDate = Guard.Against.Null(dateRange.End);
        
        // Loop over each day in the date range
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            // Add sample events for each day
            events.Add(new CustomCalenderItem
            {
                Start = date.AddHours(TimeSlot.Morning.GetStartHour()),
                End = date.AddHours(TimeSlot.Morning.GetEndHour()),
                Text = Localizer["Forenoon"],
                Available = false
            });

            events.Add(new CustomCalenderItem
            {
                Start = date.AddHours(TimeSlot.Afternoon.GetStartHour()),
                End = date.AddHours(TimeSlot.Afternoon.GetEndHour()),
                Text = Localizer["Noon"],
                Available = false
            });

            events.Add(new CustomCalenderItem
            {
                Start = date.AddHours(TimeSlot.Evening.GetStartHour()),
                End = date.AddHours(TimeSlot.Evening.GetEndHour()),
                Text = Localizer["Afternoon"],
                Available = false
            });
        }

        return events;
    }

    private DateTime GetTimeFromTimeslot(DateTime date, BookingDto.ViewBookingCalender timeSlot, bool isEnd = false)
    {
        switch (timeSlot.TimeSlot)
        {
            case TimeSlot.Morning:
                return isEnd ? date.AddHours(TimeSlot.Morning.GetEndHour()) : date.AddHours(TimeSlot.Morning.GetStartHour());
            case TimeSlot.Afternoon:
                return isEnd ? date.AddHours(TimeSlot.Afternoon.GetEndHour()) : date.AddHours(TimeSlot.Afternoon.GetStartHour());
            case TimeSlot.Evening:
                return isEnd ? date.AddHours(TimeSlot.Evening.GetEndHour()) : date.AddHours(TimeSlot.Evening.GetStartHour());
        }

        return DateTime.MinValue;
    }

    private void ShowErrorDialog(string title, string message)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        DialogService.ShowMessageBox(
            $"{title}",
            $"{message}",
            "ok",
            options: options
        );
    }

}